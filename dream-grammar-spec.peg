# Note. This spec is designed to give a more formal understanding of how the
# dream language is written and should be parsed than the overview. With that
# said, while it uses PEG, it is not designed to be used with a parser generator
# only a human looking for less ambiguity.

Dream:
    whitespace <- " " / "\n" / "\t" / "\r"

    # Unlimited whitespace
    uw <- whitespace*

    single_line_comment <- "//" .* "\n"

    bock_comment <- "///" .* "///"

    int <- [0-9]+

    float <- [0-9]+ "." [0-9]+

    bool <- "true" / "false"

    # This grammar spec leaves out string interpolation i.e. "$()"
    string <- '"' (. '\"')* '"'

    identifier <- [a-zA-Z_] [a-zA-Z0-9] *

    list <- uw expr? uw ("," uw expr)*

    labled_list <-
        uw identifier uw ":" uw expr uw
        ("," uw identifier uw ":" uw expr uw)*

    tuple <- "$(" list ")"

    anon_struct <- "$(" labled_list ")"

    array <- "$[" list "]"

    dictionary <- "${" labled_list "}"

    block <- "{" expr* "}"

    expr_terminator <- ";" \ "\n"

    if_expr <-
        "if" expr block
        ("elif" expr block)*
        ("else" block)?

    if_ufcs <-
        ".if" block
        ("elif" expr block)*
        ("else" block)?

    while <- "while" expr block

    for <- "for" identifier "in" identifier block

    match_expr <-
        "match" expr "{"
        (case expr block)*
        "}"

    match_ufcs <-
        ".match" "{"
        (case expr block)*
        "}"

    type_annotation <- ":" type_tags? type

    parameter_list <-
        (uw identifier? identifier uw) ("," uw identifier? identifier uw)?
        (uw type_annotation uw)?
        ("," parameter_list)*

    function_signature <-
        parameter_list?
        ("->" uw type_annotation uw)?

    function_type_annotation <- "{" uw function_signature uw "}"

    generic_signature <- "[" uw identifier? uw ("," uw identifier)* "]"

    closure <- "{" function_signature "|" expr* "}"

    function <- function_tags? "fn" uw identifier uw generic_signature? uw closure

    variable_type <- "let" / "var" / "ref" / "mref"

    variable_list <-
        identifier (uw "," uw identifier)*
        (uw type_annotation)?

    varaible_binding <-
        variable_type
        " "
        variable_list
        uw "=" uw (expr / expr_terminator)

    struct_body <- "{" (varaible_binding / function / uw)* "}"

    struct <-
        "struct" uw identifier uw generic_signature? uw struct_body

    trait_variable_def <- variable_type variable_list expr_terminator

    trait <-
        "trait" uw identifier uw generic_signature? uw "{"
        (trait_variable_def / function_annotation)
        "}"

    impl <-
        "impl" generic_signature? uw (identifier generic_signature? "for")? uw
        identifier generic_signature? uw struct_body
