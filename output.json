[
  "hello",
  ["let", "map", "=", ["expr"], "=>", "world", ["world", "world"]],
  ["hello", ["how", "are", "you"]],
  [[], "=>", 5],
  [[], "=>", 5],
  "hello",
  ["hello"],
  [
    "macro",
    ["def-wasm-operator", "op", "wasm-fn", "arg-type", "return-type"],
    [
      "pub",
      "fn",
      [
        "$op",
        ["typed-parameter", "left", "$arg-type"],
        ["typed-parameter", "right", "$arg-type"]
      ],
      "->",
      "$return-type",
      ["binaryen-mod", ["$arg-type", "$wasm-fn"], ["left", "right"]]
    ]
  ],
  [
    "macro",
    ["pub", "&body"],
    ["$&body"],
    ["export", ["$", "extract", "&body", 1]]
  ],
  [
    "macro",
    ["let", "&body"],
    [
      "$@",
      "block",
      ["define", "equals-expr", ["extract", "&body", 0]],
      [
        "array",
        "\"define\"",
        ["extract", "equals-expr", 1],
        ["extract", "equals-expr", 2]
      ]
    ]
  ],
  [
    "macro",
    ["var", "&body"],
    [
      "$@",
      "block",
      ["define", "equals-expr", ["extract", "&body", 0]],
      [
        "array",
        "\"define-mut\"",
        ["extract", "equals-expr", 1],
        ["extract", "equals-expr", 2]
      ]
    ]
  ],
  ["macro", ["lambda", "&body"], ["lambda-expr", ["quote", "$&body"]]],
  [
    "macro",
    ["'=>'", "&body"],
    ["lambda-expr", ["quote", ["$", "macro-expand", "&body"]]]
  ],
  ["macro", ["'<|'", "&body"], "$&body"],
  [
    "macro",
    ["fn", "&body"],
    [
      "$@",
      "block",
      ["let", "definitions", "=", ["extract", "&body", 0]],
      ["let", "identifier", "=", ["extract", "definitions", 0]],
      [
        "let",
        "params",
        "=",
        ["array", "\"parameters\""],
        ".",
        [
          "concat",
          [
            "definitions",
            ".",
            ["slice", 1],
            ".",
            "map",
            ["expr"],
            "=>",
            [
              "let",
              "param-identifier-index",
              "=",
              ["if", ["expr", ".", "length", "==", 3], 1, 2]
            ],
            [
              "let",
              "param-identifier",
              "=",
              ["extract", "expr", "param-identifier-index"]
            ],
            [
              "let",
              "type",
              "=",
              ["extract", "expr", "param-identifier-index", "+", 1]
            ],
            ["array", "param-identifier", "type"]
          ]
        ]
      ],
      [
        "let",
        "type-arrow-index",
        "=",
        [
          "if",
          [["extract", "&body", 1], "==", "\"->\""],
          1,
          ["if", [["extract", "&body", 2], "==", "\"->\""], 2, -1]
        ]
      ],
      [
        "let",
        "return-type",
        "=",
        [
          "array",
          "\"return-type\"",
          [
            "if",
            ["type-arrow-index", ">", -1],
            ["extract", "&body", "type-arrow-index", "+", 1],
            ["array"]
          ]
        ]
      ],
      [
        "let",
        "expressions",
        "=",
        "macro-expand",
        "<|",
        [
          "if",
          ["type-arrow-index", ">", -1],
          ["&body", ".", ["slice", "type-arrow-index", "+", 2]],
          ["&body", ".", ["slice", 1]]
        ]
      ],
      [
        "let",
        "extract-variables",
        "=",
        ["exprs"],
        "=>",
        [
          "exprs",
          ".",
          ["reduce", ["array"]],
          ["vars", "expr"],
          "=>",
          [
            "if",
            [["is-list", "expr"]],
            [
              "if",
              [
                ["extract", "expr", 0],
                "==",
                "\"define-mut\"",
                "or",
                ["extract", "expr", 0],
                "==",
                "\"define\""
              ],
              [
                "block",
                [
                  "vars",
                  ".",
                  [
                    "push",
                    ["array", ["extract", "expr", 1], ["extract", "expr", 2]]
                  ]
                ],
                "vars"
              ],
              ["concat", "vars", ["extract-variables", "expr"]]
            ],
            "vars"
          ]
        ]
      ],
      [
        "let",
        "variables",
        "=",
        ["array", "variables"],
        ".",
        ["concat", ["extract-variables", "expressions"]]
      ],
      [
        "array",
        "\"define-function\"",
        "identifier",
        "params",
        "variables",
        "return-type",
        ["array", "\"block\"", ".", ["concat", "expressions"]]
      ]
    ]
  ],
  ["def-wasm-operator", "'<'", "lt_s", "i32", "i32"],
  ["def-wasm-operator", "'-'", "sub", "i32", "i32"],
  ["def-wasm-operator", "'+'", "add", "i32", "i32"],
  ["def-wasm-operator", "'<'", "lt", "f32", "i32"],
  ["def-wasm-operator", "'-'", "sub", "f32", "f32"],
  ["def-wasm-operator", "'+'", "add", "f32", "f32"]
]
