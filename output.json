{
  "ast": [
    "root",
    [
      "module",
      "std/macros",
      ["imports"],
      ["exports"],
      [
        ["export", "pub", ["parameters", ["&body"]]],
        ["export", "`", ["parameters", ["&body"]]],
        ["export", "':'", ["parameters", ["&body"]]],
        ["export", "let", ["parameters", ["&body"]]],
        ["export", "var", ["parameters", ["&body"]]],
        ["export", "';'", ["parameters", ["&body"]]],
        ["export", "lambda", ["parameters", ["&body"]]],
        ["export", "'=>'", ["parameters", ["&body"]]],
        [
          "lambda-expr",
          ["definitions"],
          [
            "block",
            [
              "concat",
              ["quote", "parameters"],
              [
                "map",
                ["slice", "definitions", 1],
                [
                  "lambda-expr",
                  ["expr"],
                  [
                    "block",
                    [
                      "define",
                      "is-labeled",
                      ["is-list", ["extract", "expr", 2]]
                    ],
                    [
                      "define",
                      "param-definition",
                      ["if", "is-labeled", ["extract", "expr", 2], "expr"]
                    ],
                    [
                      "define",
                      "param-identifier",
                      ["extract", "param-definition", 1]
                    ],
                    ["define", "type", ["extract", "param-definition", 2]],
                    [
                      "define",
                      "param",
                      ["quote", "$param-identifier", "$type"]
                    ],
                    [
                      "if",
                      "is-labeled",
                      ["push", "param", ["extract", "expr", 1]]
                    ],
                    "param"
                  ]
                ]
              ]
            ]
          ]
        ],
        ["export", "fn", ["parameters", ["&body"]]],
        [
          "export",
          "def-wasm-operator",
          ["parameters", ["op", "wasm-fn", "arg-type", "return-type"]]
        ],
        ["export", "extern-fn", ["parameters", ["&body"]]],
        ["export", "match", ["parameters", ["&body"]]],
        ["export", "type", ["parameters", ["&body"]]],
        ["typed-block", "i32", 0],
        [
          "lambda-expr",
          ["name", "expr"],
          [
            "block",
            ["define", "fields", ["slice", "expr", 1]],
            ["=", "cdt-type-id", ["+", "cdt-type-id", 1]],
            [
              "define",
              "get-size",
              [
                "lambda-expr",
                ["param"],
                [
                  "block",
                  ["define", "match-value", ["block", ["extract", "param", 2]]],
                  [
                    "if",
                    ["==", "\"i32\"", "match-value"],
                    4,
                    [
                      "if",
                      ["==", "\"i64\"", "match-value"],
                      8,
                      [
                        "if",
                        ["==", "\"f32\"", "match-value"],
                        4,
                        ["if", ["==", "\"f64\"", "match-value"], 8, 4]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "define",
              "total-size",
              [
                "reduce",
                "fields",
                0,
                [
                  "lambda-expr",
                  ["size", "param"],
                  [
                    "block",
                    ["define", "next-size", ["get-size", "param"]],
                    ["+", "next-size", "size"]
                  ]
                ]
              ]
            ],
            [
              "define",
              "initializer-params",
              [
                "reduce",
                "fields",
                ["quote"],
                [
                  "lambda-expr",
                  ["params", "field"],
                  [
                    "block",
                    ["define", "name", ["extract", "field", 1]],
                    ["define", "type", ["extract", "field", 2]],
                    [
                      "push",
                      "params",
                      [
                        "quote",
                        "labeled-expr",
                        "$name",
                        ["labeled-expr", "$name", "$type"]
                      ]
                    ],
                    "params"
                  ]
                ]
              ]
            ],
            [
              "define",
              "field-initializers",
              [
                "map",
                "fields",
                [
                  "lambda-expr",
                  ["field"],
                  [
                    "block",
                    ["define", "field-name", ["extract", "field", 1]],
                    ["define", "fn-name", ["+", "\"set-\"", "field-name"]],
                    ["quote", "$fn-name", "address", "$field-name"]
                  ]
                ]
              ]
            ],
            [
              "define",
              "initializer",
              [
                "block",
                [
                  "quote",
                  "fn",
                  ["$name", "$@initializer-params"],
                  "->",
                  ["cdt-pointer", "$name", "$total-size"],
                  [
                    "define",
                    ["labeled-expr", "address", "$name"],
                    ["alloc", "$total-size"]
                  ],
                  "$@field-initializers",
                  "address"
                ]
              ]
            ],
            [
              "define",
              "accessors-info",
              [
                "reduce",
                "fields",
                ["array", 0, ["quote"]],
                [
                  "lambda-expr",
                  ["info", "param"],
                  [
                    "block",
                    ["define", "offset", ["extract", "info", 0]],
                    ["define", "accessors", ["extract", "info", 1]],
                    ["define", "field-name", ["extract", "param", 1]],
                    ["define", "field-type", ["extract", "param", 2]],
                    [
                      "define",
                      "read-fn",
                      [
                        "block",
                        ["define", "match-value", ["block", "field-type"]],
                        [
                          "if",
                          ["==", "\"i32\"", "match-value"],
                          ["quote", "read-i32"],
                          [
                            "if",
                            ["==", "\"i64\"", "match-value"],
                            ["quote", "read-i64"],
                            [
                              "if",
                              ["==", "\"f32\"", "match-value"],
                              ["quote", "read-f32"],
                              [
                                "if",
                                ["==", "\"f64\"", "match-value"],
                                ["quote", "read-f64"],
                                ["quote", "read-i32"]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ],
                    [
                      "define",
                      "read-accessor",
                      [
                        "block",
                        [
                          "quote",
                          "fn",
                          ["$field-name", ["labeled-expr", "self", "$name"]],
                          "->",
                          "$field-type",
                          ["$@read-fn", "self", "$offset"]
                        ]
                      ]
                    ],
                    ["define", "write-name", ["+", "\"set-\"", "field-name"]],
                    [
                      "define",
                      "write-fn",
                      [
                        "block",
                        ["define", "match-value", ["block", "field-type"]],
                        [
                          "if",
                          ["==", "\"i32\"", "match-value"],
                          ["quote", "store-i32"],
                          [
                            "if",
                            ["==", "\"i64\"", "match-value"],
                            ["quote", "store-i64"],
                            [
                              "if",
                              ["==", "\"f32\"", "match-value"],
                              ["quote", "store-f32"],
                              [
                                "if",
                                ["==", "\"f64\"", "match-value"],
                                ["quote", "store-f64"],
                                ["quote", "store-i32"]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ],
                    [
                      "define",
                      "write-accessor",
                      [
                        "block",
                        [
                          "quote",
                          "fn",
                          [
                            "$write-name",
                            ["labeled-expr", "self", "$name"],
                            ["labeled-expr", "value", "$field-type"]
                          ],
                          "->",
                          "void",
                          ["$@write-fn", "self", "$offset", "value"]
                        ]
                      ]
                    ],
                    ["push", "accessors", "read-accessor"],
                    ["push", "accessors", "write-accessor"],
                    [
                      "array",
                      ["+", "offset", ["get-size", "param"]],
                      "accessors"
                    ]
                  ]
                ]
              ]
            ],
            ["define", "accessors", ["extract", "accessors-info", 1]],
            [
              "quote",
              "splice-block",
              ["define-cdt", "$name", "$cdt-type-id", "$total-size"],
              "$initializer",
              "$@accessors"
            ]
          ]
        ],
        ["export", "global", ["parameters", ["&body"]]]
      ]
    ],
    [
      "module",
      "std/memory",
      ["imports", ["std/macros", "***"]],
      ["exports"],
      [
        ["define-global", ["labeled-expr", "header-size", "i32"], 8],
        ["define-global", ["labeled-expr", "size-index", "i32"], 0],
        ["define-global", ["labeled-expr", "type-index", "i32"], 4],
        ["define-mut-global", ["labeled-expr", "stack-pointer", "i32"], 0],
        [
          "define-function",
          "alloc",
          ["parameters", ["size", "i32"]],
          ["variables", ["address", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["ensure-space", "size"],
            [
              "define",
              ["labeled-expr", "address", "i32"],
              ["typed-block", "i32", "stack-pointer"]
            ],
            [
              "=",
              "stack-pointer",
              ["+", ["+", "stack-pointer", "size"], "header-size"]
            ],
            [
              "bnr",
              ["i32", "store", "void"],
              [
                ["quote", 0],
                ["quote", 2],
                "address",
                ["+", "size", "header-size"]
              ]
            ],
            "address"
          ]
        ],
        ["export", "alloc", ["parameters", ["size", "i32"]]],
        [
          "define-function",
          "copy",
          ["parameters", ["src", "i32"], ["dest", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["memory", "copy", "void"],
              ["dest", "src", ["size", "src"]]
            ],
            "dest"
          ]
        ],
        ["export", "copy", ["parameters", ["src", "i32"], ["dest", "i32"]]],
        [
          "define-function",
          "size",
          ["parameters", ["address", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "load", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", "size-index", "address"]
              ]
            ]
          ]
        ],
        ["export", "size", ["parameters", ["address", "i32"]]],
        [
          "define-function",
          "set-return",
          ["parameters", ["return-address", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "=",
              "stack-pointer",
              ["+", "return-address", ["size", "return-address"]]
            ],
            "return-address"
          ]
        ],
        ["export", "set-return", ["parameters", ["return-address", "i32"]]],
        [
          "define-function",
          "read-i32",
          ["parameters", ["address", "i32"], ["offset", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "load", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", ["+", "address", "offset"], "header-size"]
              ]
            ]
          ]
        ],
        [
          "export",
          "read-i32",
          ["parameters", ["address", "i32"], ["offset", "i32"]]
        ],
        [
          "define-function",
          "store-i32",
          [
            "parameters",
            ["address", "i32"],
            ["offset", "i32"],
            ["value", "i32"]
          ],
          ["variables"],
          ["return-type", "void"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "store", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", ["+", "address", "offset"], "header-size"],
                "value"
              ]
            ]
          ]
        ],
        [
          "export",
          "store-i32",
          [
            "parameters",
            ["address", "i32"],
            ["offset", "i32"],
            ["value", "i32"]
          ]
        ],
        [
          "define-function",
          "ensure-space",
          ["parameters", ["size", "i32"]],
          ["variables", ["mem-size", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "define",
              ["labeled-expr", "mem-size", "i32"],
              ["bnr", ["memory", "size", "i32"]]
            ],
            [
              "if",
              [
                ">=",
                ["+", ["+", "stack-pointer", "size"], "header-size"],
                ["*", "mem-size", 65536]
              ],
              ["bnr", ["memory", "grow", "i32"], [1]],
              0
            ]
          ]
        ]
      ]
    ],
    [
      "module",
      "std/string",
      ["imports", ["std/macros", "***"]],
      ["exports"],
      [
        ["define-type", "String", "i32"],
        [
          "define-extern-function",
          "alloc-string",
          ["namespace", "strings"],
          ["parameters"],
          ["return-type", "String"]
        ],
        [
          "define-extern-function",
          "de-alloc-string",
          ["namespace", "strings"],
          ["parameters", ["str", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-len",
          ["namespace", "strings"],
          ["parameters", ["str", "String"]],
          ["return-type", "i32"]
        ],
        [
          "define-extern-function",
          "get-char-code-from-string",
          ["namespace", "strings"],
          ["parameters", ["charIndex", "i32"], ["str", "String"]],
          ["return-type", "i32"]
        ],
        [
          "define-extern-function",
          "add-char-code-to-string",
          ["namespace", "strings"],
          ["parameters", ["char", "i32"], ["str", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "print-str",
          ["namespace", "strings"],
          ["parameters", ["str", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-equals",
          ["namespace", "strings"],
          ["parameters", ["a", "String"], ["b", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-starts-with",
          ["namespace", "strings"],
          ["parameters", ["str", "String"], ["startsWith", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-ends-with",
          ["namespace", "strings"],
          ["parameters", ["str", "String"], ["endsWith", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-includes",
          ["namespace", "strings"],
          ["parameters", ["str", "String"], ["includes", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-test",
          ["namespace", "strings"],
          [
            "parameters",
            ["str", "String"],
            ["regex", "String"],
            ["flags", "String"]
          ],
          ["return-type", "void"]
        ],
        ["export", "string", ["parameters", ["str"]]]
      ]
    ],
    [
      "module",
      "std/index",
      [
        "imports",
        ["std/macros", "***"],
        ["std/memory", "***"],
        ["std/string", "***"]
      ],
      ["exports"],
      [
        [
          "define-function",
          "<",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "lt_s", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'<'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          ">",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "gt_s", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'>'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "<=",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "le_s", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'<='", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          ">=",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "ge_s", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'>='", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "==",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "eq", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'=='", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "and",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "'and'", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'and'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "or",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "'or'", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'or'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "xor",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "'xor'", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'xor'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "not",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "ne", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'not'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "+",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "add", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'+'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "-",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "sub", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'-'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "*",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "mul", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'*'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "/",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "div_s", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'/'", ["parameters", ["left", "i32"], ["right", "i32"]]],
        [
          "define-function",
          "<",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "lt", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'<'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          ">",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "gt", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'>'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "<=",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "le", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'<='", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          ">=",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "ge", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'>='", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "==",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "eq", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'=='", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "not",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "ne", "i32"], ["left", "right"]]
          ]
        ],
        ["export", "'not'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "+",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "add", "f32"], ["left", "right"]]
          ]
        ],
        ["export", "'+'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "-",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "sub", "f32"], ["left", "right"]]
          ]
        ],
        ["export", "'-'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "*",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "mul", "f32"], ["left", "right"]]
          ]
        ],
        ["export", "'*'", ["parameters", ["left", "f32"], ["right", "f32"]]],
        [
          "define-function",
          "/",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["variables"],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "div", "f32"], ["left", "right"]]
          ]
        ],
        ["export", "'/'", ["parameters", ["left", "f32"], ["right", "f32"]]]
      ]
    ],
    [
      "module",
      "src/example",
      ["imports", ["std/index", "***"], ["std/index", "***"]],
      ["exports"],
      [
        ["define-cdt", "Pos", 1, 12],
        [
          "define-function",
          "Pos",
          [
            "parameters",
            ["x", "i32", "x"],
            ["y", "i32", "y"],
            ["z", "i32", "z"]
          ],
          ["variables", ["address", "Pos"], ["*__return_alloc_address", "i32"]],
          ["return-type", "Pos"],
          [
            "typed-block",
            "i32",
            [
              "define",
              ["labeled-expr", "*__return_alloc_address", "i32"],
              ["alloc", 12]
            ],
            [
              "set-return",
              [
                "copy",
                [
                  "typed-block",
                  "Pos",
                  ["define", ["labeled-expr", "address", "Pos"], ["alloc", 12]],
                  ["set-x", "address", "x"],
                  ["set-y", "address", "y"],
                  ["set-z", "address", "z"],
                  "address"
                ],
                "*__return_alloc_address"
              ]
            ]
          ]
        ],
        [
          "define-function",
          "x",
          ["parameters", ["self", "Pos"]],
          ["variables"],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 0]]
        ],
        [
          "define-function",
          "set-x",
          ["parameters", ["self", "Pos"], ["value", "i32"]],
          ["variables"],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 0, "value"]]
        ],
        [
          "define-function",
          "y",
          ["parameters", ["self", "Pos"]],
          ["variables"],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 4]]
        ],
        [
          "define-function",
          "set-y",
          ["parameters", ["self", "Pos"], ["value", "i32"]],
          ["variables"],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 4, "value"]]
        ],
        [
          "define-function",
          "z",
          ["parameters", ["self", "Pos"]],
          ["variables"],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 8]]
        ],
        [
          "define-function",
          "set-z",
          ["parameters", ["self", "Pos"], ["value", "i32"]],
          ["variables"],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 8, "value"]]
        ],
        [
          "define-function",
          "make-pos",
          ["parameters"],
          [
            "variables",
            ["my", "Pos"],
            ["my2", "Pos"],
            ["my3", "Pos"],
            ["*__return_alloc_address", "i32"]
          ],
          ["return-type", "Pos"],
          [
            "typed-block",
            "i32",
            [
              "define",
              ["labeled-expr", "*__return_alloc_address", "i32"],
              ["alloc", 12]
            ],
            [
              "set-return",
              [
                "copy",
                [
                  "typed-block",
                  "Pos",
                  [
                    "define",
                    ["labeled-expr", "my", "Pos"],
                    [
                      "Pos",
                      ["labeled-expr", "x", 5],
                      ["labeled-expr", "y", 4],
                      ["labeled-expr", "z", 3]
                    ]
                  ],
                  [
                    "define",
                    ["labeled-expr", "my2", "Pos"],
                    [
                      "Pos",
                      ["labeled-expr", "x", 11],
                      ["labeled-expr", "y", 24],
                      ["labeled-expr", "z", 33]
                    ]
                  ],
                  [
                    "define",
                    ["labeled-expr", "my3", "Pos"],
                    [
                      "Pos",
                      ["labeled-expr", "x", 11],
                      ["labeled-expr", "y", 24],
                      ["labeled-expr", "z", 33]
                    ]
                  ],
                  "my"
                ],
                "*__return_alloc_address"
              ]
            ]
          ]
        ],
        [
          "define-function",
          "main",
          ["parameters"],
          ["variables", ["pos", "Pos"], ["pos2", "Pos"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["define", ["labeled-expr", "pos", "Pos"], ["make-pos"]],
            [
              "define",
              ["labeled-expr", "pos2", "Pos"],
              [
                "Pos",
                ["labeled-expr", "x", 98],
                ["labeled-expr", "y", 43],
                ["labeled-expr", "z", 32]
              ]
            ],
            ["x", "pos"]
          ]
        ]
      ]
    ]
  ],
  "moduleId": "src/example",
  "path": "/Users/drew/projects/dream/example.dm",
  "srcPath": "/Users/drew/projects/dream",
  "isRoot": true,
  "workingDir": "/Users/drew/projects/dream",
  "imports": [
    [
      {
        "moduleId": "std/index",
        "path": "/Users/drew/projects/dream/std/index.dm",
        "srcPath": "",
        "isRoot": false,
        "workingDir": "/Users/drew/projects/dream/std",
        "imports": [
          [
            {
              "moduleId": "std/macros",
              "path": "/Users/drew/projects/dream/std/macros.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": []
            },
            "***"
          ],
          [
            {
              "moduleId": "std/memory",
              "path": "/Users/drew/projects/dream/std/memory.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": [
                [
                  {
                    "moduleId": "std/macros",
                    "path": "/Users/drew/projects/dream/std/macros.dm",
                    "srcPath": "",
                    "isRoot": false,
                    "workingDir": "/Users/drew/projects/dream/std",
                    "imports": []
                  },
                  "***"
                ]
              ]
            },
            "***"
          ],
          [
            {
              "moduleId": "std/string",
              "path": "/Users/drew/projects/dream/std/string.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": [
                [
                  {
                    "moduleId": "std/macros",
                    "path": "/Users/drew/projects/dream/std/macros.dm",
                    "srcPath": "",
                    "isRoot": false,
                    "workingDir": "/Users/drew/projects/dream/std",
                    "imports": []
                  },
                  "***"
                ]
              ]
            },
            "***"
          ]
        ]
      },
      "***"
    ],
    [
      {
        "moduleId": "std/index",
        "path": "/Users/drew/projects/dream/std/index.dm",
        "srcPath": "/Users/drew/projects/dream",
        "isRoot": true,
        "workingDir": "/Users/drew/projects/dream/std",
        "imports": []
      },
      "***"
    ]
  ]
}
