{
  "ast": [
    "root",
    [
      "module",
      "std/macros",
      ["imports"],
      [
        "exports",
        "pub",
        "`",
        ":",
        "let",
        "var",
        "m-let",
        "m-var",
        "global",
        ";",
        "lambda",
        "=>",
        "fn",
        "def-wasm-operator",
        "extern-fn",
        "match",
        "type"
      ],
      [
        ["export", "pub", ["parameters", ["&body"]]],
        ["export", "`", ["parameters", ["&body"]]],
        ["export", ":", ["parameters", ["&body"]]],
        ["export", "let", ["parameters", ["&body"]]],
        ["export", "var", ["parameters", ["&body"]]],
        ["export", "m-let", ["parameters", ["&body"]]],
        ["export", "m-var", ["parameters", ["&body"]]],
        ["export", "global", ["parameters", ["&body"]]],
        ["export", ";", ["parameters", ["&body"]]],
        ["export", "lambda", ["parameters", ["&body"]]],
        ["export", "=>", ["parameters", ["&body"]]],
        "// Extracts typed parameters from a list where index 0 is fn name, and offset-index+ are labeled-expr",
        ["export", "fn", ["parameters", ["&body"]]],
        [
          "export",
          "def-wasm-operator",
          ["parameters", ["op", "wasm-fn", "arg-type", "return-type"]]
        ],
        "// extern $fn-id(namespace params*)",
        "// extern max(\"Math\" x:i32 y:i32)",
        ["export", "extern-fn", ["parameters", ["&body"]]],
        ["export", "match", ["parameters", ["&body"]]],
        ["export", "type", ["parameters", ["&body"]]],
        "// Takes (struct $labeled-expr*), returns (struct $labeled-expr*) + field accessor functions"
      ]
    ],
    [
      "module",
      "std/operators",
      ["imports"],
      [
        "exports",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "and",
        "or",
        "xor",
        "not",
        "+",
        "-",
        "*",
        "/",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "not",
        "+",
        "-",
        "*",
        "/"
      ],
      [
        [
          "define-function",
          "<",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "lt_s", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "<",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          ">",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "gt_s", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          ">",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "<=",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "le_s", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "<=",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          ">=",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "ge_s", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          ">=",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "==",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "eq", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "==",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "and",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "and", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "and",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "or",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "or", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "or",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "xor",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "xor", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "xor",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "not",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "ne", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "not",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "+",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "add", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "+",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "-",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "sub", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "-",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "*",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "mul", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "*",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "/",
          ["parameters", ["left", "i32"], ["right", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["i32", "div_s", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "/",
          [
            "parameters",
            ["labeled-expr", "left", "i32"],
            ["labeled-expr", "right", "i32"]
          ]
        ],
        [
          "define-function",
          "<",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "lt", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "<",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          ">",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "gt", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          ">",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "<=",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "le", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "<=",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          ">=",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "ge", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          ">=",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "==",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "eq", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "==",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "not",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["binaryen-mod", ["f32", "ne", "i32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "not",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "+",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "add", "f32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "+",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "-",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "sub", "f32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "-",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "*",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "mul", "f32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "*",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ],
        [
          "define-function",
          "/",
          ["parameters", ["left", "f32"], ["right", "f32"]],
          ["return-type", "f32"],
          [
            "typed-block",
            "f32",
            ["binaryen-mod", ["f32", "div", "f32"], ["left", "right"]]
          ]
        ],
        [
          "export",
          "/",
          [
            "parameters",
            ["labeled-expr", "left", "f32"],
            ["labeled-expr", "right", "f32"]
          ]
        ]
      ]
    ],
    [
      "module",
      "std/memory",
      ["imports", ["std/macros", "***"], ["std/operators", "***"]],
      [
        "exports",
        "alloc",
        "copy",
        "size",
        "set-return",
        "read-i32",
        "store-i32"
      ],
      [
        ["define-global", "header-size", 8],
        ["define-global", "size-index", 0],
        ["define-global", "type-index", 4],
        ["define-mut-global", "stack-pointer", 0],
        "// Returns a pointer with the location of the allocation",
        [
          "define-function",
          "alloc",
          ["parameters", ["size", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["ensure-space", "size"],
            ["define", "address", ["typed-block", "i32", "stack-pointer"]],
            [
              "=",
              "stack-pointer",
              ["+", ["+", "stack-pointer", "size"], "header-size"]
            ],
            [
              "bnr",
              ["i32", "store", "void"],
              [
                ["quote", 0],
                ["quote", 2],
                "address",
                ["+", "size", "header-size"]
              ]
            ],
            "address"
          ]
        ],
        ["export", "alloc", ["parameters", ["labeled-expr", "size", "i32"]]],
        "// Returns dest pointer",
        [
          "define-function",
          "copy",
          ["parameters", ["src", "i32"], ["dest", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["memory", "copy", "void"],
              ["dest", "src", ["size", "src"]]
            ],
            "dest"
          ]
        ],
        [
          "export",
          "copy",
          [
            "parameters",
            ["labeled-expr", "src", "i32"],
            ["labeled-expr", "dest", "i32"]
          ]
        ],
        [
          "define-function",
          "size",
          ["parameters", ["address", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "load", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", "size-index", "address"]
              ]
            ]
          ]
        ],
        ["export", "size", ["parameters", ["labeled-expr", "address", "i32"]]],
        "// Sets the stack pointer to the end of a function return space, returns the return address",
        [
          "define-function",
          "set-return",
          ["parameters", ["return-address", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "=",
              "stack-pointer",
              ["+", "return-address", ["size", "return-address"]]
            ],
            "return-address"
          ]
        ],
        [
          "export",
          "set-return",
          ["parameters", ["labeled-expr", "return-address", "i32"]]
        ],
        "// For external load and store use. Add header size automatically to offset",
        [
          "define-function",
          "read-i32",
          ["parameters", ["address", "i32"], ["offset", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "load", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", ["+", "address", "offset"], "header-size"]
              ]
            ]
          ]
        ],
        [
          "export",
          "read-i32",
          [
            "parameters",
            ["labeled-expr", "address", "i32"],
            ["labeled-expr", "offset", "i32"]
          ]
        ],
        "// For external load and store use. Add header size automatically to offset",
        [
          "define-function",
          "store-i32",
          [
            "parameters",
            ["address", "i32"],
            ["offset", "i32"],
            ["value", "i32"]
          ],
          ["return-type", "void"],
          [
            "typed-block",
            "i32",
            [
              "bnr",
              ["i32", "store", "i32"],
              [
                ["quote", 0],
                ["quote", 2],
                ["+", ["+", "address", "offset"], "header-size"],
                "value"
              ]
            ]
          ]
        ],
        [
          "export",
          "store-i32",
          [
            "parameters",
            ["labeled-expr", "address", "i32"],
            ["labeled-expr", "offset", "i32"],
            ["labeled-expr", "value", "i32"]
          ]
        ],
        [
          "define-function",
          "ensure-space",
          ["parameters", ["size", "i32"]],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["define", "mem-size", ["bnr", ["memory", "size", "i32"]]],
            [
              "if",
              [
                ">=",
                ["+", ["+", "stack-pointer", "size"], "header-size"],
                ["*", "mem-size", 65536]
              ],
              ["bnr", ["memory", "grow", "i32"], [1]],
              0
            ]
          ]
        ]
      ]
    ],
    [
      "module",
      "std/string",
      ["imports", ["std/macros", "***"]],
      ["exports", "string"],
      [
        ["define-type", "String", "i32"],
        [
          "define-extern-function",
          "alloc-string",
          ["namespace", "strings"],
          ["parameters"],
          ["return-type", "String"]
        ],
        [
          "define-extern-function",
          "de-alloc-string",
          ["namespace", "strings"],
          ["parameters", ["labeled-expr", "str", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-len",
          ["namespace", "strings"],
          ["parameters", ["labeled-expr", "str", "String"]],
          ["return-type", "i32"]
        ],
        "// Returns -1 if not found",
        [
          "define-extern-function",
          "get-char-code-from-string",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "charIndex", "i32"],
            ["labeled-expr", "str", "String"]
          ],
          ["return-type", "i32"]
        ],
        [
          "define-extern-function",
          "add-char-code-to-string",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "char", "i32"],
            ["labeled-expr", "str", "String"]
          ],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "print-str",
          ["namespace", "strings"],
          ["parameters", ["labeled-expr", "str", "String"]],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-equals",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "a", "String"],
            ["labeled-expr", "b", "String"]
          ],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-starts-with",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "str", "String"],
            ["labeled-expr", "startsWith", "String"]
          ],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-ends-with",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "str", "String"],
            ["labeled-expr", "endsWith", "String"]
          ],
          ["return-type", "void"]
        ],
        [
          "define-extern-function",
          "str-includes",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "str", "String"],
            ["labeled-expr", "includes", "String"]
          ],
          ["return-type", "void"]
        ],
        "// Regex test (pass -1 to flags for default (g))",
        [
          "define-extern-function",
          "str-test",
          ["namespace", "strings"],
          [
            "parameters",
            ["labeled-expr", "str", "String"],
            ["labeled-expr", "regex", "String"],
            ["labeled-expr", "flags", "String"]
          ],
          ["return-type", "void"]
        ],
        ["export", "string", ["parameters", ["str"]]]
      ]
    ],
    [
      "module",
      "std/index",
      [
        "imports",
        ["std/macros", "dir/macros", "re-exported"],
        ["std/operators", "dir/operators", "re-exported"],
        ["std/memory", "dir/memory", "re-exported"],
        ["std/string", "dir/string", "re-exported"]
      ],
      [
        "exports",
        "pub",
        "`",
        ":",
        "let",
        "var",
        "m-let",
        "m-var",
        "global",
        ";",
        "lambda",
        "=>",
        "fn",
        "def-wasm-operator",
        "extern-fn",
        "match",
        "type",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "and",
        "or",
        "xor",
        "not",
        "+",
        "-",
        "*",
        "/",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "not",
        "+",
        "-",
        "*",
        "/",
        "alloc",
        "copy",
        "size",
        "set-return",
        "read-i32",
        "store-i32",
        "string"
      ],
      []
    ],
    [
      "module",
      "src/example",
      ["imports", ["std/index", "***"]],
      ["exports"],
      [
        [
          "define-type",
          "Pos",
          [
            "struct",
            ["labeled-expr", "x", "i32"],
            ["labeled-expr", "y", "i32"],
            ["labeled-expr", "z", "i32"]
          ]
        ],
        [
          "define-function",
          "Pos",
          ["parameters", ["x", "i32"], ["y", "i32"], ["z", "i32"]],
          ["return-type", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]],
          [
            "typed-block",
            "i32",
            [
              "define",
              ["labeled-expr", "*__return_alloc_address", "i32"],
              ["alloc", 12]
            ],
            [
              "set-return",
              [
                "copy",
                [
                  "typed-block",
                  ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]],
                  ["define", "address", ["alloc", 12]],
                  ["set-x", "address", "x"],
                  ["set-y", "address", "y"],
                  ["set-z", "address", "z"],
                  "address"
                ],
                "*__return_alloc_address"
              ]
            ]
          ]
        ],
        [
          "define-function",
          "x",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]]
          ],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 0]]
        ],
        [
          "define-function",
          "set-x",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]],
            ["value", "i32"]
          ],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 0, "value"]]
        ],
        [
          "define-function",
          "y",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]]
          ],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 4]]
        ],
        [
          "define-function",
          "set-y",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]],
            ["value", "i32"]
          ],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 4, "value"]]
        ],
        [
          "define-function",
          "z",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]]
          ],
          ["return-type", "i32"],
          ["typed-block", "i32", ["read-i32", "self", 8]]
        ],
        [
          "define-function",
          "set-z",
          [
            "parameters",
            ["self", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]],
            ["value", "i32"]
          ],
          ["return-type", "void"],
          ["typed-block", "void", ["store-i32", "self", 8, "value"]]
        ],
        [
          "define-function",
          "make-pos",
          ["parameters"],
          ["return-type", ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]]],
          [
            "typed-block",
            "i32",
            [
              "define",
              ["labeled-expr", "*__return_alloc_address", "i32"],
              ["alloc", 12]
            ],
            [
              "set-return",
              [
                "copy",
                [
                  "typed-block",
                  ["struct", ["x", "i32"], ["y", "i32"], ["z", "i32"]],
                  [
                    "define",
                    "my",
                    [
                      "Pos",
                      [
                        "struct",
                        ["labeled-expr", "x", 5],
                        ["labeled-expr", "y", 4],
                        ["labeled-expr", "z", 3]
                      ]
                    ]
                  ],
                  [
                    "define",
                    "my2",
                    [
                      "Pos",
                      [
                        "struct",
                        ["labeled-expr", "x", 11],
                        ["labeled-expr", "y", 24],
                        ["labeled-expr", "z", 33]
                      ]
                    ]
                  ],
                  [
                    "define",
                    "my3",
                    [
                      "Pos",
                      [
                        "struct",
                        ["labeled-expr", "x", 11],
                        ["labeled-expr", "y", 24],
                        ["labeled-expr", "z", 33]
                      ]
                    ]
                  ],
                  "my"
                ],
                "*__return_alloc_address"
              ]
            ]
          ]
        ],
        [
          "define-function",
          "main",
          ["parameters"],
          ["return-type", "i32"],
          [
            "typed-block",
            "i32",
            ["define", "pos", ["make-pos"]],
            [
              "define",
              "pos2",
              [
                "Pos",
                [
                  "struct",
                  ["labeled-expr", "x", 98],
                  ["labeled-expr", "y", 43],
                  ["labeled-expr", "z", 32]
                ]
              ]
            ],
            ["x", "pos"]
          ]
        ]
      ]
    ]
  ],
  "moduleId": "src/example",
  "path": "/Users/drew/projects/dream/example.dm",
  "srcPath": "/Users/drew/projects/dream",
  "isRoot": true,
  "workingDir": "/Users/drew/projects/dream",
  "imports": [
    [
      {
        "moduleId": "std/index",
        "path": "/Users/drew/projects/dream/std/index.dm",
        "srcPath": "",
        "isRoot": false,
        "workingDir": "/Users/drew/projects/dream/std",
        "imports": [
          [
            {
              "moduleId": "std/macros",
              "path": "/Users/drew/projects/dream/std/macros.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": []
            },
            "dir/macros",
            "re-exported"
          ],
          [
            {
              "moduleId": "std/operators",
              "path": "/Users/drew/projects/dream/std/operators.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": []
            },
            "dir/operators",
            "re-exported"
          ],
          [
            {
              "moduleId": "std/memory",
              "path": "/Users/drew/projects/dream/std/memory.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": [
                [
                  {
                    "moduleId": "std/macros",
                    "path": "/Users/drew/projects/dream/std/macros.dm",
                    "srcPath": "",
                    "isRoot": false,
                    "workingDir": "/Users/drew/projects/dream/std",
                    "imports": []
                  },
                  "***",
                  null
                ],
                [
                  {
                    "moduleId": "std/operators",
                    "path": "/Users/drew/projects/dream/std/operators.dm",
                    "srcPath": "",
                    "isRoot": false,
                    "workingDir": "/Users/drew/projects/dream/std",
                    "imports": []
                  },
                  "***",
                  null
                ]
              ]
            },
            "dir/memory",
            "re-exported"
          ],
          [
            {
              "moduleId": "std/string",
              "path": "/Users/drew/projects/dream/std/string.dm",
              "srcPath": "",
              "isRoot": false,
              "workingDir": "/Users/drew/projects/dream/std",
              "imports": [
                [
                  {
                    "moduleId": "std/macros",
                    "path": "/Users/drew/projects/dream/std/macros.dm",
                    "srcPath": "",
                    "isRoot": false,
                    "workingDir": "/Users/drew/projects/dream/std",
                    "imports": []
                  },
                  "***",
                  null
                ]
              ]
            },
            "dir/string",
            "re-exported"
          ]
        ]
      },
      "***"
    ]
  ]
}
