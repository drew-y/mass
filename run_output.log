(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $f32_f32_=>_i32 (func (param f32 f32) (result i32)))
 (type $f32_f32_=>_f32 (func (param f32 f32) (result f32)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $i64_=>_none (func (param i64)))
 (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))
 (type $i32_i32_f32_=>_none (func (param i32 i32 f32)))
 (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))
 (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))
 (type $i32_i32_=>_f64 (func (param i32 i32) (result f64)))
 (type $i32_i32_f64_=>_none (func (param i32 i32 f64)))
 (type $f32_i32_=>_i32 (func (param f32 i32) (result i32)))
 (type $i32_=>_f32 (func (param i32) (result f32)))
 (type $i32_f32_=>_none (func (param i32 f32)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $none_=>_f32 (func (result f32)))
 (import "utils" "log" (func $log0 (param i32)))
 (import "utils" "log" (func $log1 (param f32)))
 (import "utils" "log" (func $log2 (param f64)))
 (import "utils" "log" (func $log3 (param i64)))
 (import "strings" "alloc-string" (func $alloc-string0 (result i32)))
 (import "strings" "de-alloc-string" (func $de-alloc-string0 (param i32)))
 (import "strings" "str-len" (func $str-len0 (param i32) (result i32)))
 (import "strings" "get-char-code-from-string" (func $get-char-code-from-string0 (param i32 i32) (result i32)))
 (import "strings" "add-char-code-to-string" (func $add-char-code-to-string0 (param i32 i32)))
 (import "strings" "print-str" (func $print-str0 (param i32)))
 (import "strings" "str-equals" (func $str-equals0 (param i32 i32)))
 (import "strings" "str-starts-with" (func $str-starts-with0 (param i32 i32)))
 (import "strings" "str-ends-with" (func $str-ends-with0 (param i32 i32)))
 (import "strings" "str-includes" (func $str-includes0 (param i32 i32)))
 (import "strings" "str-test" (func $str-test0 (param i32 i32 i32)))
 (global $header-size i32 (i32.const 8))
 (global $size-index i32 (i32.const 0))
 (global $type-index i32 (i32.const 4))
 (global $stack-pointer (mut i32) (i32.const 0))
 (memory $0 1 150)
 (export "buffer" (memory $0))
 (export "<0" (func $<0))
 (export ">0" (func $>0))
 (export "<=0" (func $<=0))
 (export ">=0" (func $>=0))
 (export "==0" (func $==0))
 (export "and0" (func $and0))
 (export "or0" (func $or0))
 (export "xor0" (func $xor0))
 (export "not0" (func $not0))
 (export "+0" (func $+0))
 (export "-0" (func $-0))
 (export "*0" (func $*0))
 (export "/0" (func $/0))
 (export "<1" (func $<1))
 (export ">1" (func $>1))
 (export "<=1" (func $<=1))
 (export ">=1" (func $>=1))
 (export "==1" (func $==1))
 (export "not1" (func $not1))
 (export "+1" (func $+1))
 (export "-1" (func $-1))
 (export "*1" (func $*1))
 (export "/1" (func $/1))
 (export "alloc0" (func $alloc0))
 (export "copy0" (func $copy0))
 (export "size0" (func $size0))
 (export "set-return0" (func $set-return0))
 (export "read-i320" (func $read-i320))
 (export "store-i320" (func $store-i320))
 (export "read-f320" (func $read-f320))
 (export "store-f320" (func $store-f320))
 (export "read-i640" (func $read-i640))
 (export "store-i640" (func $store-i640))
 (export "read-f640" (func $read-f640))
 (export "store-f640" (func $store-f640))
 (export "ensure-space0" (func $ensure-space0))
 (export "B0" (func $B0))
 (export "abba-pointer0" (func $abba-pointer0))
 (export "abba0" (func $abba0))
 (export "set-abba0" (func $set-abba0))
 (export "b-pointer0" (func $b-pointer0))
 (export "b0" (func $b0))
 (export "set-b0" (func $set-b0))
 (export "A0" (func $A0))
 (export "a-pointer0" (func $a-pointer0))
 (export "a0" (func $a0))
 (export "set-a0" (func $set-a0))
 (export "b-pointer1" (func $b-pointer1))
 (export "b1" (func $b1))
 (export "set-b1" (func $set-b1))
 (export "Pos0" (func $Pos0))
 (export "x-pointer0" (func $x-pointer0))
 (export "x0" (func $x0))
 (export "set-x0" (func $set-x0))
 (export "y-pointer0" (func $y-pointer0))
 (export "y0" (func $y0))
 (export "set-y0" (func $set-y0))
 (export "z-pointer0" (func $z-pointer0))
 (export "z0" (func $z0))
 (export "set-z0" (func $set-z0))
 (export "make-pos0" (func $make-pos0))
 (export "main0" (func $main0))
 (func $<0 (param $0 i32) (param $1 i32) (result i32)
  (i32.lt_s
   (local.get $0)
   (local.get $1)
  )
 )
 (func $>0 (param $0 i32) (param $1 i32) (result i32)
  (i32.gt_s
   (local.get $0)
   (local.get $1)
  )
 )
 (func $<=0 (param $0 i32) (param $1 i32) (result i32)
  (i32.le_s
   (local.get $0)
   (local.get $1)
  )
 )
 (func $>=0 (param $0 i32) (param $1 i32) (result i32)
  (i32.ge_s
   (local.get $0)
   (local.get $1)
  )
 )
 (func $==0 (param $0 i32) (param $1 i32) (result i32)
  (i32.eq
   (local.get $0)
   (local.get $1)
  )
 )
 (func $and0 (param $0 i32) (param $1 i32) (result i32)
  (i32.and
   (local.get $0)
   (local.get $1)
  )
 )
 (func $or0 (param $0 i32) (param $1 i32) (result i32)
  (i32.or
   (local.get $0)
   (local.get $1)
  )
 )
 (func $xor0 (param $0 i32) (param $1 i32) (result i32)
  (i32.xor
   (local.get $0)
   (local.get $1)
  )
 )
 (func $not0 (param $0 i32) (param $1 i32) (result i32)
  (i32.ne
   (local.get $0)
   (local.get $1)
  )
 )
 (func $+0 (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (local.get $0)
   (local.get $1)
  )
 )
 (func $-0 (param $0 i32) (param $1 i32) (result i32)
  (i32.sub
   (local.get $0)
   (local.get $1)
  )
 )
 (func $*0 (param $0 i32) (param $1 i32) (result i32)
  (i32.mul
   (local.get $0)
   (local.get $1)
  )
 )
 (func $/0 (param $0 i32) (param $1 i32) (result i32)
  (i32.div_s
   (local.get $0)
   (local.get $1)
  )
 )
 (func $<1 (param $0 f32) (param $1 f32) (result i32)
  (f32.lt
   (local.get $0)
   (local.get $1)
  )
 )
 (func $>1 (param $0 f32) (param $1 f32) (result i32)
  (f32.gt
   (local.get $0)
   (local.get $1)
  )
 )
 (func $<=1 (param $0 f32) (param $1 f32) (result i32)
  (f32.le
   (local.get $0)
   (local.get $1)
  )
 )
 (func $>=1 (param $0 f32) (param $1 f32) (result i32)
  (f32.ge
   (local.get $0)
   (local.get $1)
  )
 )
 (func $==1 (param $0 f32) (param $1 f32) (result i32)
  (f32.eq
   (local.get $0)
   (local.get $1)
  )
 )
 (func $not1 (param $0 f32) (param $1 f32) (result i32)
  (f32.ne
   (local.get $0)
   (local.get $1)
  )
 )
 (func $+1 (param $0 f32) (param $1 f32) (result f32)
  (f32.add
   (local.get $0)
   (local.get $1)
  )
 )
 (func $-1 (param $0 f32) (param $1 f32) (result f32)
  (f32.sub
   (local.get $0)
   (local.get $1)
  )
 )
 (func $*1 (param $0 f32) (param $1 f32) (result f32)
  (f32.mul
   (local.get $0)
   (local.get $1)
  )
 )
 (func $/1 (param $0 f32) (param $1 f32) (result f32)
  (f32.div
   (local.get $0)
   (local.get $1)
  )
 )
 (func $alloc0 (param $0 i32) (result i32)
  (local $1 i32)
  (drop
   (call $ensure-space0
    (local.get $0)
   )
  )
  (local.set $1
   (block (result i32)
    (global.get $stack-pointer)
   )
  )
  (global.set $stack-pointer
   (call $+0
    (call $+0
     (global.get $stack-pointer)
     (local.get $0)
    )
    (global.get $header-size)
   )
  )
  (i32.store align=2
   (local.get $1)
   (call $+0
    (local.get $0)
    (global.get $header-size)
   )
  )
  (local.get $1)
 )
 (func $copy0 (param $0 i32) (param $1 i32) (result i32)
  (memory.copy
   (local.get $1)
   (local.get $0)
   (call $size0
    (local.get $0)
   )
  )
  (local.get $1)
 )
 (func $size0 (param $0 i32) (result i32)
  (i32.load align=2
   (call $+0
    (global.get $size-index)
    (local.get $0)
   )
  )
 )
 (func $set-return0 (param $0 i32) (result i32)
  (global.set $stack-pointer
   (call $+0
    (local.get $0)
    (call $size0
     (local.get $0)
    )
   )
  )
  (local.get $0)
 )
 (func $read-i320 (param $0 i32) (param $1 i32) (result i32)
  (i32.load align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
  )
 )
 (func $store-i320 (param $0 i32) (param $1 i32) (param $2 i32)
  (i32.store align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
   (local.get $2)
  )
 )
 (func $read-f320 (param $0 i32) (param $1 i32) (result f32)
  (f32.load align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
  )
 )
 (func $store-f320 (param $0 i32) (param $1 i32) (param $2 f32)
  (f32.store align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
   (local.get $2)
  )
 )
 (func $read-i640 (param $0 i32) (param $1 i32) (result i64)
  (i64.load align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
  )
 )
 (func $store-i640 (param $0 i32) (param $1 i32) (param $2 i64)
  (i64.store align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
   (local.get $2)
  )
 )
 (func $read-f640 (param $0 i32) (param $1 i32) (result f64)
  (f64.load align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
  )
 )
 (func $store-f640 (param $0 i32) (param $1 i32) (param $2 f64)
  (f64.store align=2
   (call $+0
    (call $+0
     (local.get $0)
     (local.get $1)
    )
    (global.get $header-size)
   )
   (local.get $2)
  )
 )
 (func $ensure-space0 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (memory.size)
  )
  (if (result i32)
   (call $>=0
    (call $+0
     (call $+0
      (global.get $stack-pointer)
      (local.get $0)
     )
     (global.get $header-size)
    )
    (call $*0
     (local.get $1)
     (i32.const 65536)
    )
   )
   (memory.grow
    (i32.const 1)
   )
   (i32.const 0)
  )
 )
 (func $B0 (param $0 f32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local.set $2
   (call $alloc0
    (i32.const 8)
   )
  )
  (call $set-return0
   (call $copy0
    (block (result i32)
     (local.set $3
      (call $alloc0
       (i32.const 8)
      )
     )
     (call $set-abba0
      (local.get $3)
      (local.get $0)
     )
     (call $set-b0
      (local.get $3)
      (local.get $1)
     )
     (local.get $3)
    )
    (local.get $2)
   )
  )
 )
 (func $abba-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $abba0 (param $0 i32) (result f32)
  (call $read-f320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $set-abba0 (param $0 i32) (param $1 f32)
  (call $store-f320
   (local.get $0)
   (i32.const 0)
   (local.get $1)
  )
 )
 (func $b-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 4)
  )
 )
 (func $b0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 4)
  )
 )
 (func $set-b0 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 4)
   (local.get $1)
  )
 )
 (func $A0 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local.set $2
   (call $alloc0
    (i32.const 12)
   )
  )
  (call $set-return0
   (call $copy0
    (block (result i32)
     (local.set $3
      (call $alloc0
       (i32.const 8)
      )
     )
     (call $set-a0
      (local.get $3)
      (local.get $0)
     )
     (call $set-b1
      (local.get $3)
      (local.get $1)
     )
     (local.get $3)
    )
    (local.get $2)
   )
  )
 )
 (func $a-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $a0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $set-a0 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 0)
   (local.get $1)
  )
 )
 (func $b-pointer1 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 4)
  )
 )
 (func $b1 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $alloc0
    (i32.const 8)
   )
  )
  (call $set-return0
   (call $copy0
    (block (result i32)
     (call $read-i320
      (local.get $0)
      (i32.const 4)
     )
    )
    (local.get $1)
   )
  )
 )
 (func $set-b1 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 4)
   (local.get $1)
  )
 )
 (func $Pos0 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local.set $3
   (call $alloc0
    (i32.const 12)
   )
  )
  (call $set-return0
   (call $copy0
    (block (result i32)
     (local.set $4
      (call $alloc0
       (i32.const 12)
      )
     )
     (call $set-x0
      (local.get $4)
      (local.get $0)
     )
     (call $set-y0
      (local.get $4)
      (local.get $1)
     )
     (call $set-z0
      (local.get $4)
      (local.get $2)
     )
     (local.get $4)
    )
    (local.get $3)
   )
  )
 )
 (func $x-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $x0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 0)
  )
 )
 (func $set-x0 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 0)
   (local.get $1)
  )
 )
 (func $y-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 4)
  )
 )
 (func $y0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 4)
  )
 )
 (func $set-y0 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 4)
   (local.get $1)
  )
 )
 (func $z-pointer0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 8)
  )
 )
 (func $z0 (param $0 i32) (result i32)
  (call $read-i320
   (local.get $0)
   (i32.const 8)
  )
 )
 (func $set-z0 (param $0 i32) (param $1 i32)
  (call $store-i320
   (local.get $0)
   (i32.const 8)
   (local.get $1)
  )
 )
 (func $make-pos0 (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local.set $0
   (call $alloc0
    (i32.const 12)
   )
  )
  (call $set-return0
   (call $copy0
    (block (result i32)
     (local.set $1
      (call $Pos0
       (i32.const 5)
       (i32.const 4)
       (i32.const 3)
      )
     )
     (local.set $2
      (call $Pos0
       (i32.const 11)
       (i32.const 20)
       (i32.const 33)
      )
     )
     (local.set $3
      (call $Pos0
       (i32.const 11)
       (i32.const 24)
       (i32.const 33)
      )
     )
     (local.get $1)
    )
    (local.get $0)
   )
  )
 )
 (func $main0 (result f32)
  (local $0 i32)
  (local $1 i32)
  (local.set $0
   (call $B0
    (f32.const 5.800000190734863)
    (i32.const 3)
   )
  )
  (local.set $1
   (call $A0
    (i32.const 1)
    (local.get $0)
   )
  )
  (call $set-abba0
   (call $b-pointer1
    (local.get $1)
   )
   (block (result f32)
    (f32.const 145.1999969482422)
   )
  )
  (call $abba0
   (call $b1
    (local.get $1)
   )
  )
 )
)

145.1999969482422
