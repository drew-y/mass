use macros::all
use array::all
use operators::all
use optional::all

obj Map<T> {
  buckets: Array<Array<{ key: string, value: T }>>
}

pub fn new_map<T>() -> Map
  Map {
    buckets: new_array<Array<{ key: string, value: T }>>({ with_size: 16 })
  }


impl<T> Map<T>
  fn hash(key: string) -> i32
    var hashValue = 0
    var i = 0
    while i < key.length do:
      hashValue = (hashValue * 31 + key.char_code_at(i)) % self.buckets.length
      i = i + 1
    hashValue

  fn get_bucket_by_key(self, key: string) -> Optional<Array<{ key: string, value: T }>>
    let index = self.hash(key)
    self.buckets.get(index)

  fn get_index_of_item_in_bucket(bucket: Array<{ key: string, value: T }>, key: string) -> i32
    var i = 0
    var index = -1
    while i < bucket.length do:
      bucket.get(i).match(v)
        Some<{ key: string, value: T }>:
          if v.key == key then:
            index = i
            break
        None:
          // Do nothing
      i = i + 1
    index

  pub fn set(self, key: string, value: T) -> Map<T>
    self.get_bucket_by_key(key).match(bucket)
      Some<Array<{ key: string, value: T }>>:
        add_to_bucket(bucket, key, value)
        self
      None:
        let new_bucket = new_array<{ key: string, value: T }>({ with_size: 1 })
        new_bucket.set(0, { key: key, value: value })
        self.buckets.set(index, new_bucket)
        self

  fn add_to_bucket(
    bucket: Array<{ key: string, value: T }>,
    key: string,
    value: T
  ) -> void
    let index = get_index_of_item_in_bucket(bucket, key)

    if index < 0 then:
      bucket.push({ key: key, value: value })
    else:
      bucket.set(index, { key: key, value: value })

  pub fn get(self, key: string) -> Optional<T>
    self.get_bucket_by_key(key).match(bucket)
      Some<Array<{ key: string, value: T }>>:
        let index = get_index_of_item_in_bucket(bucket, key)
        if index < 0 then:
          None {}
        else:
          bucket.get(index)
      None: None {}

  pub fn delete(self, key: string) -> Map<T>
    self.get_bucket_by_key(key).match(bucket)
      Some<Array<{ key: string, value: T }>>:
        let index = get_index_of_item_in_bucket(bucket, key)
        if index < 0 then:
          self
        else:
          bucket.remove(index, 1)
          true
      None: self

  pub fn has(self, key: string) -> bool
    self.get_bucket_by_key(key).match(bucket)
      Some<Array<{ key: string, value: T }>>:
        get_index_of_item_in_bucket(bucket, key) >= 0
      None: false
