use std::macros::all

macro def_wasm_operator(op, wasm_fn, arg_type, return_type)
  let params = `(parameters, left: $arg_type, right: $arg_type)
  let body = ` binaryen
    func: $wasm_fn
    namespace: $arg_type
    args: [left, right]

  ` define_function $op $params return_type($return_type) $body

pub def_wasm_operator('<', lt_s, i32, bool)
pub def_wasm_operator('>', gt_s, i32, bool)
pub def_wasm_operator('<=', le_s, i32, bool)
pub def_wasm_operator('>=', ge_s, i32, bool)
pub def_wasm_operator('==', eq, i32, bool)
pub def_wasm_operator('and', 'and', i32, i32)
pub def_wasm_operator('or', 'or', i32, i32)
pub def_wasm_operator('xor', 'xor', i32, i32)
pub def_wasm_operator('not', ne, i32, bool)
pub def_wasm_operator('+', add, i32, i32)
pub def_wasm_operator('-', sub, i32, i32)
pub def_wasm_operator('*', mul, i32, i32)
pub def_wasm_operator('/', div_s, i32, i32)

pub def_wasm_operator('<', lt_s, i64, bool)
pub def_wasm_operator('>', gt_s, i64, bool)
pub def_wasm_operator('<=', le_s, i64, bool)
pub def_wasm_operator('>=', ge_s, i64, bool)
pub def_wasm_operator('==', eq, i64, bool)
pub def_wasm_operator('and', 'and', i64, i64)
pub def_wasm_operator('or', 'or', i64, i64)
pub def_wasm_operator('xor', 'xor', i64, i64)
pub def_wasm_operator('not', ne, i64, bool)
pub def_wasm_operator('+', add, i64, i64)
pub def_wasm_operator('-', sub, i64, i64)
pub def_wasm_operator('*', mul, i64, i64)
pub def_wasm_operator('/', div_s, i64, i64)

pub def_wasm_operator('<', lt, f32, bool)
pub def_wasm_operator('>', gt, f32, bool)
pub def_wasm_operator('<=', le, f32, bool)
pub def_wasm_operator('>=', ge, f32, bool)
pub def_wasm_operator('==', eq, f32, bool)
pub def_wasm_operator('not', ne, f32, bool)
pub def_wasm_operator('+', add, f32, f32)
pub def_wasm_operator('-', sub, f32, f32)
pub def_wasm_operator('*', mul, f32, f32)
pub def_wasm_operator('/', div, f32, f32)

pub def_wasm_operator('<', lt, f64, bool)
pub def_wasm_operator('>', gt, f64, bool)
pub def_wasm_operator('<=', le, f64, bool)
pub def_wasm_operator('>=', ge, f64, bool)
pub def_wasm_operator('==', eq, f64, bool)
pub def_wasm_operator('not', ne, f64, bool)
pub def_wasm_operator('+', add, f64, f64)
pub def_wasm_operator('-', sub, f64, f64)
pub def_wasm_operator('*', mul, f64, f64)
pub def_wasm_operator('/', div, f64, f64)

// Bitwise operators
// i32 bitwise operators
pub def_wasm_operator(shift_l, shl, i32, i32)
pub def_wasm_operator(shift_r, shr_s, i32, i32)
pub def_wasm_operator(shift_lu, shl, i32, i32)
pub def_wasm_operator(shift_ru, shr_u, i32, i32)
pub def_wasm_operator(rotate_l, rotl, i32, i32)
pub def_wasm_operator(rotate_r, rotr, i32, i32)
pub def_wasm_operator(count_leading_zeros, clz, i32, i32)
pub def_wasm_operator(count_trailing_zeros, ctz, i32, i32)
pub def_wasm_operator(pop_count, popcnt, i32, i32)
pub def_wasm_operator(select, select, i32, i32)
pub def_wasm_operator(lt_u, lt_u, i32, bool)
pub def_wasm_operator(gt_u, gt_u, i32, bool)
pub def_wasm_operator(lte_u, le_u, i32, bool)
pub def_wasm_operator(gte_u, ge_u, i32, bool)

// i64 bitwise operators
pub def_wasm_operator(shift_l, shl, i64, i64)
pub def_wasm_operator(shift_r, shr_s, i64, i64)
pub def_wasm_operator(shift_lu, shl, i64, i64)
pub def_wasm_operator(shift_ru, shr_u, i64, i64)
pub def_wasm_operator(rotate_l, rotl, i64, i64)
pub def_wasm_operator(rotate_r, rotr, i64, i64)
pub def_wasm_operator(count_leading_zeros, clz, i64, i64)
pub def_wasm_operator(count_trailing_zeros, ctz, i64, i64)
pub def_wasm_operator(pop_count, popcnt, i64, i64)
pub def_wasm_operator(select, select, i64, i64)
pub def_wasm_operator(lt_u, lt_u, i64, bool)
pub def_wasm_operator(gt_u, gt_u, i64, bool)
pub def_wasm_operator(lte_u, le_u, i64, bool)
pub def_wasm_operator(gte_u, ge_u, i64, bool)

pub fn '=='(left: bool, right: bool) -> bool
  binaryen
    func: eq
    namespace: i32
    args: [left, right]

pub fn 'and'(left: bool, right: bool) -> bool
  binaryen
    func: 'and'
    namespace: i32
    args: [left, right]

pub fn 'or'(left: bool, right: bool) -> bool
  binaryen
    func: 'or'
    namespace: i32
    args: [left, right]
