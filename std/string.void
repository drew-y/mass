use std::macros::all

type String = i32

extern_fn strings alloc_string() -> String

extern_fn strings de_alloc_string(str:String) -> void

extern_fn strings str_len(str:String) -> i32

// Returns -1 if not found
extern_fn strings get_char_code_from_string(charIndex:i32 str:String) -> i32

extern_fn strings add_char_code_to_string(char:i32 str:String) -> void

extern_fn strings print_str(str:String) -> void

extern_fn strings str_equals(a:String b:String) -> void

extern_fn strings str_starts_with(str:String startsWith:String) -> void

extern_fn strings str_ends_with(str:String endsWith:String) -> void

extern_fn strings str_includes(str:String includes:String) -> void

// Regex test (pass -1 to flags for default (g))
extern_fn strings str_test(str:String regex:String flags:String) -> void

pub macro string(str)
    let add_codes = str.split("").map (char) =>
        ` add_char_code_to_string $(char_to_code char) index
    `(block
        (let index:String = alloc_string())
        $@add_codes
        index)
